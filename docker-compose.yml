version: '3.8' # Docker Compose file format version

services:
  # Service for your first Node.js application instance
  app1:
    build: . # Tells Docker Compose to build the image from the current directory
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080
    environment: # Environment variables injected into the 'app' container
      DB_USER: ${DB_USER}
      DB_HOST: db # This is the service name of your database container
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      PORT: 8080
    depends_on:
      - db
    restart: unless-stopped

  # Service for your second Node.js application instance
  app2:
    build: . # Build from the same Dockerfile
    ports:
      - "8081:8080" # Map host port 8081 to container port 8080
    environment: # Environment variables for the second instance
      DB_USER: ${DB_USER}
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      PORT: 8080 # The container still listens on 8080 internally
    depends_on:
      - db
    restart: unless-stopped

  # Service for your PostgreSQL database
  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432 (optional, but good for local DB access)
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  db_data: